<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: test.bin Pages: 1 -->
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
/** 
 *  SVGPan library 1.2.1
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the first g 
 * element), including the the library into any SVG adds the following capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behavior of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
 *	- Fixed a regression with mouse wheel (now working on Firefox 5)
 *	- Working with viewBox attribute (#4)
 *	- Added "use strict;" and fixed resulting warnings (#5)
 *	- Added configuration variables, dragging is disabled by default (#3)
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2010 Andrea Leofreddi <a.leofreddi@itcharm.com>. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 * 
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY Andrea Leofreddi ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Andrea Leofreddi OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION 
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)

/// <====
/// END OF CONFIGURATION 

var root = document.documentElement;

var state = 'none', svgRoot, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(typeof(svgRoot) == "undefined") {
		var g = null;

		g = root.getElementById("viewport");

		if(g == null)
			g = root.getElementsByTagName('g')[0];

		if(g == null)
			alert('Unable to obtain SVG root element');

		setCTM(g, g.getCTM());

		g.removeAttribute("viewBox");

		svgRoot = g;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 3600; // Chrome/Safari
	else
		delta = evt.detail / -90; // Mozilla

	var z = 1 + delta; // Zoom factor: 0.9/1.1

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg" 
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element 
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}

]]></script><g id="viewport" transform="scale(0.5,0.5) translate(0,0)"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 500)">
<title>test.bin</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-500 698.3105,-500 698.3105,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_L</title>
<polygon fill="none" stroke="#000000" points="8,-336 8,-488 504,-488 504,-336 8,-336"/>
</g>
<!-- L -->
<g id="node1" class="node">
<title>L</title>
<polygon fill="#f8f8f8" stroke="#000000" points="495.7501,-480 16.2499,-480 16.2499,-344 495.7501,-344 495.7501,-480"/>
<text text-anchor="start" x="24.125" y="-450.4" font-family="Times,serif" font-size="32.00" fill="#000000">File: test.bin</text>
<text text-anchor="start" x="24.125" y="-418.4" font-family="Times,serif" font-size="32.00" fill="#000000">Type: inuse_space</text>
<text text-anchor="start" x="24.125" y="-386.4" font-family="Times,serif" font-size="32.00" fill="#000000">Time: Jun 15, 2017 at 2:21pm (JST)</text>
<text text-anchor="start" x="24.125" y="-354.4" font-family="Times,serif" font-size="32.00" fill="#000000">0 of 0 total ( &#160;&#160;&#160;0%)</text>
</g>
<!-- N1 -->
<g id="node2" class="node">
<title>N1</title>
<g id="a_node2"><a xlink:title="compress/flate.NewWriter (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="485.8751,-36 386.1249,-36 386.1249,0 485.8751,0 485.8751,-36"/>
<text text-anchor="middle" x="436" y="-19.6" font-family="Times,serif" font-size="8.00" fill="#000000">compress/flate.NewWriter</text>
<text text-anchor="middle" x="436" y="-11.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node3" class="node">
<title>N2</title>
<g id="a_node3"><a xlink:title="compress/gzip.(*Writer).Write (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="492.9922,-122 379.0078,-122 379.0078,-86 492.9922,-86 492.9922,-122"/>
<text text-anchor="middle" x="436" y="-105.6" font-family="Times,serif" font-size="8.00" fill="#000000">compress/gzip.(*Writer).Write</text>
<text text-anchor="middle" x="436" y="-97.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N1 -->
<g id="edge1" class="edge">
<title>N2&#45;&gt;N1</title>
<g id="a_edge1"><a xlink:title="compress/gzip.(*Writer).Write &#45;&gt; compress/flate.NewWriter (0)">
<path fill="none" stroke="#000000" d="M436,-85.7616C436,-74.3597 436,-59.4342 436,-46.494"/>
<polygon fill="#000000" stroke="#000000" points="439.5001,-46.2121 436,-36.2121 432.5001,-46.2121 439.5001,-46.2121"/>
</a>
</g>
<g id="a_edge1&#45;label"><a xlink:title="compress/gzip.(*Writer).Write &#45;&gt; compress/flate.NewWriter (0)">
<text text-anchor="middle" x="441.25" y="-56.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node4" class="node">
<title>N3</title>
<g id="a_node4"><a xlink:title="github.com/kpango/gache.BenchmarkMap.func1 (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="694.1215,-208 521.8785,-208 521.8785,-172 694.1215,-172 694.1215,-208"/>
<text text-anchor="middle" x="608" y="-191.6" font-family="Times,serif" font-size="8.00" fill="#000000">github.com/kpango/gache.BenchmarkMap.func1</text>
<text text-anchor="middle" x="608" y="-183.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N5 -->
<g id="node6" class="node">
<title>N5</title>
<g id="a_node6"><a xlink:title="runtime.convT2E (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="644.2073,-122 571.7927,-122 571.7927,-86 644.2073,-86 644.2073,-122"/>
<text text-anchor="middle" x="608" y="-105.6" font-family="Times,serif" font-size="8.00" fill="#000000">runtime.convT2E</text>
<text text-anchor="middle" x="608" y="-97.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;N5 -->
<g id="edge2" class="edge">
<title>N3&#45;&gt;N5</title>
<g id="a_edge2"><a xlink:title="github.com/kpango/gache.BenchmarkMap.func1 &#45;&gt; runtime.convT2E (0)">
<path fill="none" stroke="#000000" d="M608,-171.7616C608,-160.3597 608,-145.4342 608,-132.494"/>
<polygon fill="#000000" stroke="#000000" points="611.5001,-132.2121 608,-122.2121 604.5001,-132.2121 611.5001,-132.2121"/>
</a>
</g>
<g id="a_edge2&#45;label"><a xlink:title="github.com/kpango/gache.BenchmarkMap.func1 &#45;&gt; runtime.convT2E (0)">
<text text-anchor="middle" x="613.25" y="-142.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N4 -->
<g id="node5" class="node">
<title>N4</title>
<g id="a_node5"><a xlink:title="internal/pprof/profile.(*Profile).Write (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="503.6528,-208 368.3472,-208 368.3472,-172 503.6528,-172 503.6528,-208"/>
<text text-anchor="middle" x="436" y="-191.6" font-family="Times,serif" font-size="8.00" fill="#000000">internal/pprof/profile.(*Profile).Write</text>
<text text-anchor="middle" x="436" y="-183.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N4&#45;&gt;N2 -->
<g id="edge3" class="edge">
<title>N4&#45;&gt;N2</title>
<g id="a_edge3"><a xlink:title="internal/pprof/profile.(*Profile).Write &#45;&gt; compress/gzip.(*Writer).Write (0)">
<path fill="none" stroke="#000000" d="M436,-171.7616C436,-160.3597 436,-145.4342 436,-132.494"/>
<polygon fill="#000000" stroke="#000000" points="439.5001,-132.2121 436,-122.2121 432.5001,-132.2121 439.5001,-132.2121"/>
</a>
</g>
<g id="a_edge3&#45;label"><a xlink:title="internal/pprof/profile.(*Profile).Write &#45;&gt; compress/gzip.(*Writer).Write (0)">
<text text-anchor="middle" x="441.25" y="-142.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N6 -->
<g id="node7" class="node">
<title>N6</title>
<g id="a_node7"><a xlink:title="runtime.goexit (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="576.379,-430 513.621,-430 513.621,-394 576.379,-394 576.379,-430"/>
<text text-anchor="middle" x="545" y="-413.6" font-family="Times,serif" font-size="8.00" fill="#000000">runtime.goexit</text>
<text text-anchor="middle" x="545" y="-405.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N7 -->
<g id="node8" class="node">
<title>N7</title>
<g id="a_node8"><a xlink:title="runtime/pprof.profileWriter (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="520.879,-294 417.121,-294 417.121,-258 520.879,-258 520.879,-294"/>
<text text-anchor="middle" x="469" y="-277.6" font-family="Times,serif" font-size="8.00" fill="#000000">runtime/pprof.profileWriter</text>
<text text-anchor="middle" x="469" y="-269.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N7 -->
<g id="edge4" class="edge">
<title>N6&#45;&gt;N7</title>
<g id="a_edge4"><a xlink:title="runtime.goexit &#45;&gt; runtime/pprof.profileWriter (0)">
<path fill="none" stroke="#000000" d="M536.9382,-393.8664C529.8215,-378.2639 518.9088,-355.2881 508,-336 501.6612,-324.7922 494.0628,-312.8253 487.2635,-302.5508"/>
<polygon fill="#000000" stroke="#000000" points="490.0205,-300.3777 481.5459,-294.019 484.2055,-304.2747 490.0205,-300.3777"/>
</a>
</g>
<g id="a_edge4&#45;label"><a xlink:title="runtime.goexit &#45;&gt; runtime/pprof.profileWriter (0)">
<text text-anchor="middle" x="508.25" y="-314.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N8 -->
<g id="node9" class="node">
<title>N8</title>
<g id="a_node9"><a xlink:title="testing.(*B).RunParallel.func1 (0)">
<polygon fill="#f8f8f8" stroke="#000000" points="658.9805,-294 545.0195,-294 545.0195,-258 658.9805,-258 658.9805,-294"/>
<text text-anchor="middle" x="602" y="-277.6" font-family="Times,serif" font-size="8.00" fill="#000000">testing.(*B).RunParallel.func1</text>
<text text-anchor="middle" x="602" y="-269.6" font-family="Times,serif" font-size="8.00" fill="#000000">0</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N8 -->
<g id="edge5" class="edge">
<title>N6&#45;&gt;N8</title>
<g id="a_edge5"><a xlink:title="runtime.goexit &#45;&gt; testing.(*B).RunParallel.func1 (0)">
<path fill="none" stroke="#000000" d="M552.5692,-393.9403C562.2788,-370.7734 579.2121,-330.3711 590.5142,-303.4047"/>
<polygon fill="#000000" stroke="#000000" points="593.762,-304.7101 594.3995,-294.1344 587.3061,-302.0043 593.762,-304.7101"/>
</a>
</g>
<g id="a_edge5&#45;label"><a xlink:title="runtime.goexit &#45;&gt; testing.(*B).RunParallel.func1 (0)">
<text text-anchor="middle" x="591.25" y="-314.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N7&#45;&gt;N4 -->
<g id="edge6" class="edge">
<title>N7&#45;&gt;N4</title>
<g id="a_edge6"><a xlink:title="runtime/pprof.profileWriter &#45;&gt; internal/pprof/profile.(*Profile).Write (0)">
<path fill="none" stroke="#000000" d="M462.0015,-257.7616C457.5389,-246.1316 451.6695,-230.8357 446.6367,-217.72"/>
<polygon fill="#000000" stroke="#000000" points="449.8386,-216.2945 442.9884,-208.2121 443.3033,-218.8023 449.8386,-216.2945"/>
</a>
</g>
<g id="a_edge6&#45;label"><a xlink:title="runtime/pprof.profileWriter &#45;&gt; internal/pprof/profile.(*Profile).Write (0)">
<text text-anchor="middle" x="460.25" y="-228.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
<!-- N8&#45;&gt;N3 -->
<g id="edge7" class="edge">
<title>N8&#45;&gt;N3</title>
<g id="a_edge7"><a xlink:title="testing.(*B).RunParallel.func1 &#45;&gt; github.com/kpango/gache.BenchmarkMap.func1 (0)">
<path fill="none" stroke="#000000" d="M603.2724,-257.7616C604.0679,-246.3597 605.1092,-231.4342 606.012,-218.494"/>
<polygon fill="#000000" stroke="#000000" points="609.5248,-218.4315 606.7294,-208.2121 602.5418,-217.9442 609.5248,-218.4315"/>
</a>
</g>
<g id="a_edge7&#45;label"><a xlink:title="testing.(*B).RunParallel.func1 &#45;&gt; github.com/kpango/gache.BenchmarkMap.func1 (0)">
<text text-anchor="middle" x="610.25" y="-228.8" font-family="Times,serif" font-size="14.00" fill="#000000"> 0</text>
</a>
</g>
</g>
</g>
</g></svg>
